Prep:
- 1280x720 resolution on laptop monitor.
- Turn off taskbar on laptop monitor.
- Ensure PPTX will display on laptop monitor.
- All notifications must be off. Chrome, Skype, etc.

Starting:
- Open end-user stream on second computer. Table in Playbook has the link.
- Must join in IE 15-30mins before my presentation. Table in Playbook has the link.
- Ensure I'm muted.

Presenting:
- Fullscreen: Shift-Alt-Enter
- Draw: Ctrl-2 + Ctrl-MouseDrag


Thinking about tasks:
- Forget what you already know about tasks (TPL / dynamic task parallelism).
- Delay and HttpClient.GetStringAsync.
  - Both tasks are threadless.
  - Threadless? What goes on under the covers?
- Both tasks represent some operation that will complete in the future.
- Both tasks have already started.
  - Maybe already completed, too!

The async & await keywords:
- "async" goes on a method implementation and does two things:
  - Enables the await keyword for that method.
  - Transforms that methods into a state machine, similar to the "yield" keyword.
    - The details of the transformation are not important; just be aware that there is a transformation going on.
- "await" is like a unary operator (like a cast): it takes a single argument.
  - This argument is called an "awaitable", which most of the time is a Task instance.
  - Note that you don't await a method; you call the method and await the returned task. [Show equivalent code]

How async methods work:
- Async methods start synchronously; await is where things start to get asynchronous.
- When an await is hit:
  - If the awaitable (task) is already complete, await extracts the result from the task and just continues executing synchronously.
  - Otherwise, it *pauses* the method, registers it with the awaitable (task), and *returns*.
    - This "registering" is saying to the task: "when you complete, please resume this method at this point".
- The first time this happens in an async method, an incomplete Task is returned to its caller.
- When the async method completes later, that Task is completed.
- This task instance is created for you by the async keyword (by the state machine).
- The task represents the method:
  - When the method completes, the task is completed.
  - When the method returns a value, the returned value becomes the task's result.
  - When the method raises an exception, that exception is captured and placed on the task.
- Demo: returning values.
- Demo: task exceptions are observed when awaited.

Pausing and resuming:
- When a task is awaited, by default a "context" is captured and used to resume the async method later after that task completes.
  - This is normally a UI thread, ASP.NET request context, or the thread pool context.
  - Technically this is the current SynchronizationContext or TaskScheduler.
- ASP.NET request contexts include HttpContext.Current, identity, and culture.
  - ASP.NET request context only allows one thread at a time.
  - ASP.NET request may "jump threads" during a request lifetime.
  - ASP.NET vNext will not have a request context.
- Demo: await resumes in a context.

(slides: pitfalls)
- Avoid async void.
  - Void is a problem because the async method cannot return a task that represents the method.
- Async all the way.
  - Blocking is a problem because async methods cannot resume in a blocked context.
(back to demo)

More concurrency:
- Save tasks into variables and await them later.
- Task.WhenAll works great with LINQ's Select statement.
  - Task.WhenAll returns a task that completes when all its argument tasks have completed. Logically a "join".

Cancellation:
- With a responsive UI, users' expectations grow.

Progress reporting
